/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountHolder } from "./AccountHolder";
import { AccountHolderCountArgs } from "./AccountHolderCountArgs";
import { AccountHolderFindManyArgs } from "./AccountHolderFindManyArgs";
import { AccountHolderFindUniqueArgs } from "./AccountHolderFindUniqueArgs";
import { DeleteAccountHolderArgs } from "./DeleteAccountHolderArgs";
import { AccountHolderService } from "../accountHolder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccountHolder)
export class AccountHolderResolverBase {
  constructor(
    protected readonly service: AccountHolderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountHolder",
    action: "read",
    possession: "any",
  })
  async _accountHoldersMeta(
    @graphql.Args() args: AccountHolderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountHolder])
  @nestAccessControl.UseRoles({
    resource: "AccountHolder",
    action: "read",
    possession: "any",
  })
  async accountHolders(
    @graphql.Args() args: AccountHolderFindManyArgs
  ): Promise<AccountHolder[]> {
    return this.service.accountHolders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountHolder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountHolder",
    action: "read",
    possession: "own",
  })
  async accountHolder(
    @graphql.Args() args: AccountHolderFindUniqueArgs
  ): Promise<AccountHolder | null> {
    const result = await this.service.accountHolder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountHolder)
  @nestAccessControl.UseRoles({
    resource: "AccountHolder",
    action: "delete",
    possession: "any",
  })
  async deleteAccountHolder(
    @graphql.Args() args: DeleteAccountHolderArgs
  ): Promise<AccountHolder | null> {
    try {
      return await this.service.deleteAccountHolder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
